//Generated by wsdl2apex

public class sapHistorialDePedidosSoapFunctions {

    @TestVisible public sapHistorialDePedidosSoapFunctionsMcS.ZMmHistorialPedidoResponse_element result {get;set;}
    public String ErrorConectionSap = '';
    @TestVisible private SAP_environment_variables__mdt environmentVariables;
    @TestVisible private sapHistorialDePedidosSoapFunctionsMcS.TableOfZmmPoItems PoItems;
    @TestVisible private sapHistorialDePedidosSoapFunctionsMcS.TableOfBapireturn Return_x;

    public sapHistorialDePedidosSoapFunctions(){
        this.environmentVariables = [
            SELECT  Username__c,Password__c,Target__c
            FROM SAP_environment_variables__mdt
            LIMIT 1
        ];

        PoItems = new sapHistorialDePedidosSoapFunctionsMcS.TableOfZmmPoItems();
        Return_x = new sapHistorialDePedidosSoapFunctionsMcS.TableOfBapireturn();
    }

    public void startRequest(String purchaseOrder){
        sapHistorialDePedidosSoapFunctionsMcS.Z_MM_HISTORIAL_PEDIDO soap = new sapHistorialDePedidosSoapFunctionsMcS.Z_MM_HISTORIAL_PEDIDO();
        
        soap.inputHttpHeaders_x = new Map<String, String>();
        String encodedusernameandpassword;
        
        String myData = environmentVariables.Username__c + ':' + environmentVariables.Password__c;
        Blob hash = Blob.valueOf(myData);
        encodedusernameandpassword = EncodingUtil.base64Encode(hash);
        soap.timeout_x = 60000;
        soap.inputHttpHeaders_x.put('Authorization', 'Basic '+ encodedusernameandpassword);
        try{
            result = soap.ZMmHistorialPedido(
                PoItems,
                Purchaseorder,
                Return_x,
                environmentVariables.Target__c
            );

            recursiveXml((Map<String, Object>)JSON.deserializeUntyped(JSON.serialize(result)),0);
        }catch (Exception e) {
            ErrorConectionSap = String.valueOf(e);
        }
    }

    public void recursiveXml(Map<String, Object> obj, Integer tab){
        tab = tab + 4;
        String guiones = '';
        for(Integer i = 0 ; i < tab; i++){
            guiones = guiones + '-';
        }
        Map<String, Object> zipcodeMap = (Map<String, Object>)JSON.deserializeUntyped(JSON.serialize(result));
        List<String> orderedValues = new List<String>(obj.keySet());
        orderedValues.sort();

        for(String key : orderedValues){
            System.debug(guiones+' '+key+' --> '+obj.get(key));
            
            if(!key.contains('info') && obj.get(key) != null && !(obj.get(key) instanceof String)){
                if(obj.get(key) instanceof List<Object>){
                    for(Object cosa : (List<Object>)obj.get(key)){
                        recursiveXml((Map<String, Object>)cosa,tab);
                    }
                }else{
                    recursiveXml((Map<String, Object>)obj.get(key),tab);
                }
            }
        }
    }

    public static List<Order> CheckExistingOrder(String purchaseOrder){

        return [SELECT Id, OwnerId, ContractId, AccountId, Pricebook2Id, OriginalOrderId, OpportunityId, EffectiveDate, EndDate, IsReductionOrder, Status, Description, 
                CustomerAuthorizedById, CompanyAuthorizedById, Type, BillingStreet, BillingCity, BillingState, BillingPostalCode, BillingCountry, BillingLatitude, 
                BillingLongitude, BillingGeocodeAccuracy, BillingAddress, ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, 
                ShippingLatitude, ShippingLongitude, ShippingGeocodeAccuracy, ShippingAddress, ShipToContactId, ActivatedDate, ActivatedById, StatusCode, 
                OrderNumber, TotalAmount, CreatedDate, CreatedById, LastModifiedDate, LastModifiedById, IsDeleted, SystemModstamp, LastViewedDate, LastReferencedDate, 
                Numero_Pedido_SAP__c, Marca__c, Safra__c, Pai__c, poca_de_Plantio__c, Centro__c  
                FROM Order WHERE Numero_Pedido_SAP__C = :purchaseOrder ORDER BY CreatedDate DESC LIMIT 1];

    }

    public static Id GenerateOrder(String purchaseOrder){
        System.debug('Generating order');
        sapHistorialDePedidosSoapFunctions response = new sapHistorialDePedidosSoapFunctions();
        response.startRequest(purchaseOrder);
        List<Order> existOrder = sapHistorialDePedidosSoapFunctions.CheckExistingOrder(purchaseOrder);
        System.debug('Response getted from integration');
        System.debug(response);
        if (response.result == null || response.result.PoItems == null || response.result.PoItems.item == null) return null; 
        
        Order newOrder = new Order();
        if(existOrder.size() > 0) {
            newOrder = existOrder[0].clone();
            newOrder.Status = 'Edição';
        } else {
            newOrder.AccountId = [SELECT Id FROM Account WHERE Name = 'ASOCIADOS DON MARIO S.A.' LIMIT 1].id;
            newOrder.EffectiveDate = System.today();
            newOrder.pricebook2Id = [SELECT Id FROM Pricebook2 WHERE Name =  'Lista de precios estándar'].id;
            newOrder.Status = 'Edição';
            newOrder.Numero_Pedido_SAP__C = purchaseOrder;
        }
        System.debug('Estado de la nueva orden : '+newOrder.Status);
        insert newOrder;
        
        List<OrderItem> existingOrderItems = new List<OrderItem>();
        if(existOrder.size() > 0) {
            existingOrderItems = [SELECT Quantity, Product2.Codigo_Material_SAP__c FROM OrderItem WHERE OrderId = :existOrder[0].Id];
        }

        List<OrderItem> newOrdersItems = new List<OrderItem>();

        Map<String, OrderItem> existingOrderItemsByMaterial = new Map<String, OrderItem>();
        for(OrderItem orderItem : existingOrderItems){
            existingOrderItemsByMaterial.put(orderItem.Product2.Codigo_Material_SAP__c, orderItem);
        }
        
        List<PricebookEntry> pricebookEntrys = [
            SELECT  Id, Pricebook2.Name, Product2.Codigo_Material_SAP__c,
                    Product2.CANTIDAD_SUB_UNIDAD__c
            FROM PricebookEntry 
            WHERE Pricebook2.Name =  'Lista de precios estándar'
        ];
        
        Map<String, List<String>> pricebookEntryByCode = new Map<String, List<String>>();
        for (PricebookEntry pb : pricebookEntrys) {
            if (pb.Product2.Codigo_Material_SAP__c != null){
                System.debug('Insertando codigo sap en map : '+pb.Product2.Codigo_Material_SAP__c);
                 pricebookEntryByCode.put(
                    pb.Product2.Codigo_Material_SAP__c,
                    new List<String>{ pb.id , pb.Product2.CANTIDAD_SUB_UNIDAD__c} 
                );
            } 
               
        }
        //En QA los codigos Product2.Codigo_Material_SAP__c tienen diez ceros a la izquierda, de esta manera llegan de SAP y al buscarlos en SF los encuentra correctamente
        //En produccion los Product2.Codigo_Material_SAP__c esta cargados sin los diez ceros y esto termina en que no encuentra los productos ,  item.Material.substring(10,18) le saca esos 10 ceros para que matchee con los codigos cargados
        for(sapHistorialDePedidosSoapFunctionsMcS.ZmmPoItems item : response.result.PoItems.item){
            System.debug('Item sap , item.Material =  '+item.Material.substring(10,18));
            if (item.Material != null  && pricebookEntryByCode.containskey(item.Material.substring(10,18))) { //Se agrega filtro para sacar los diez 0 de adelante porq en prod los productos no tienen estos ceros
                Decimal cantidadSubUnidad = Decimal.valueOf(pricebookEntryByCode.get(item.Material.substring(10,18))[1]);//Se agrega filtro
                OrderItem newOrderItem = new OrderItem();
                newOrderItem.OrderId = newOrder.Id;
                newOrderItem.Quantity = 0;
                newOrderItem.quantidade_da_ordem__c = Decimal.valueOf(item.PoQty) * cantidadSubUnidad;
                newOrderItem.quantidade_da_migo__c = Decimal.valueOf(item.DelivQty ) * cantidadSubUnidad;
                newOrderItem.quantidade_da_fatura__c = Decimal.valueOf(item.IvQty ) * cantidadSubUnidad;
                newOrderItem.unidade_da_ordem__c = item.PoUnit ;
                newOrderItem.unitPrice = 0;
                newOrderItem.PricebookEntryId = pricebookEntryByCode.get(item.Material.substring(10,18))[0];
                if(existingOrderItemsByMaterial.containsKey(item.Material.substring(10,18))){
                    newOrderItem.Quantity = existingOrderItemsByMaterial.get(item.Material.substring(10,18)).Quantity;
                }
                newOrdersItems.add(newOrderItem);
            }
        }
        
        if(newOrdersItems.size() > 0) {
            insert newOrdersItems;  
        }
        
        return newOrder.id;

    }
}